import tkinter as tk
from tkinter import messagebox
import threading
import time
import SAPHANA  # Gi·∫£ s·ª≠ b·∫°n ƒë√£ ƒë·ªãnh nghƒ©a c√°c ch·ª©c nƒÉng trong SAPHANA.py
import sys
import GET_CUSTOMER_CODE
import GET_PRODUCT_CODE
import ADVANCE  # Th√™m import cho file ADVANCE.py
import ConnectionGUI
import ID
import CopyMT
# Th√™m bi·∫øn to√†n c·ª•c ƒë·ªÉ ki·ªÉm so√°t vi·ªác l·∫∑p l·∫°i
running = True

class RedirectText:
    def __init__(self, text_widget):
        self.text_widget = text_widget

    def write(self, string):
        if string.strip():  # Ki·ªÉm tra xem chu·ªói kh√¥ng r·ªóng
            # Th√™m th·ªùi gian v√†o ƒë·∫ßu m·ªói d√≤ng
            current_time = time.strftime("%Y-%m-%d %H:%M:%S")  # L·∫•y th·ªùi gian hi·ªán t·∫°i
            self.text_widget.insert(tk.END, f"[{current_time}] {string}\n")  # Th√™m th·ªùi gian v√† xu·ªëng d√≤ng
            self.text_widget.see(tk.END)

    def flush(self):  # Ph∆∞∆°ng th·ª©c n√†y c·∫ßn thi·∫øt ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi Python
        pass

def run_task():
    try:
        # G·ªçi h√†m t·ª´ SAPHANA.py ƒë·ªÉ th·ª±c hi·ªán c√¥ng vi·ªác
        SAPHANA.main_function()  # Thay th·∫ø b·∫±ng h√†m ch√≠nh c·ªßa b·∫°n
        if checkbox_var.get():  # Ki·ªÉm tra xem checkbox c√≥ ƒë∆∞·ª£c ch·ªçn kh√¥ng
            values = text_var.get().split(",")  # T√°ch c√°c gi√° tr·ªã b·∫±ng d·∫•u ph·∫©y
            for value in values:  # L·∫∑p qua t·ª´ng gi√° tr·ªã
                CopyMT.Copy(value.strip())  # G·ªçi h√†m CopyMT.Copy v·ªõi gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè kho·∫£ng tr·∫Øng
        root.after(0, lambda: [start_scheduled_task()])  # G·ªçi l·∫°i h√†m ƒë·ªÉ l·∫∑p l·∫°i
    except Exception as e:
        root.after(0, lambda: messagebox.showerror("Error", f"Error: {str(e)}"))

def run_task_maunal():
    run_button.config(bg='green')  # Change button color to green when task starts
    try:
        SAPHANA.main_function()
        if checkbox_var.get():  # Ki·ªÉm tra xem checkbox c√≥ ƒë∆∞·ª£c ch·ªçn kh√¥ng
            values = text_var.get().split(",")  # T√°ch c√°c gi√° tr·ªã b·∫±ng d·∫•u ph·∫©y
            for value in values:  # L·∫∑p qua t·ª´ng gi√° tr·ªã
                CopyMT.Copy(value.strip())  # G·ªçi h√†m CopyMT.Copy v·ªõi gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè kho·∫£ng tr·∫Øng
        # Th√™m th√¥ng b√°o ho√†n t·∫•t
        messagebox.showinfo("Notification", "Done!!! üò∫")
    finally:
        run_button.config(bg='red')  # Revert button color back to red after task completion

def on_quit():
    global running  # S·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c
    running = False  # D·ª´ng vi·ªác l·∫∑p l·∫°i
    root.destroy()

def on_icon_double_click(icon, item):
    root.deiconify()  # Hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï ch√≠nh
    root.lift()  # ƒê∆∞a c·ª≠a s·ªï l√™n tr√™n c√πng
    root.focus_force()  # ƒê·∫£m b·∫£o c·ª≠a s·ªï nh·∫≠n ƒë∆∞·ª£c ti√™u ƒëi·ªÉm

def schedule_task(interval):
    global running  # S·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c
    while running:  # Ki·ªÉm tra bi·∫øn running
        time.sleep(interval)  # Ch·ªù 20 gi√¢y
        SAPHANA.main_function()  # Thay th·∫ø b·∫±ng h√†m ch√≠nh c·ªßa b·∫°n
        if checkbox_var.get():  # Ki·ªÉm tra xem checkbox c√≥ ƒë∆∞·ª£c ch·ªçn kh√¥ng
            values = text_var.get().split(",")  # T√°ch c√°c gi√° tr·ªã b·∫±ng d·∫•u ph·∫©y
            for value in values:  # L·∫∑p qua t·ª´ng gi√° tr·ªã
                CopyMT.Copy(value.strip())  # G·ªçi h√†m CopyMT.Copy v·ªõi gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè kho·∫£ng tr·∫Øng
        print("Restarting task...")

def start_scheduled_task():
    # interval = 10
    interval = int(schedule_var.get()) * 60  # Chuy·ªÉn ƒë·ªïi ph√∫t th√†nh gi√¢y
    threading.Thread(target=schedule_task, args=(interval,), daemon=True).start()
    print(f"Scheduled in {int(interval/60)} mins")

def Modify_customer_code():
    GET_CUSTOMER_CODE.Modify_Customer_code()

def Modify_Product_code():
    GET_PRODUCT_CODE.Modify_Product_code()

def load_listboxes_from_file():
    try:
        with open('Configure/sheet_name.txt', 'r') as file:
            lines = file.readlines()
            for line in lines:
                sheet_output.insert(tk.END, line.strip())  # Th√™m d√≤ng v√†o sheet_output
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while reading the file: {str(e)}")

# Th√™m c√°c n√∫t ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi Listbox
def add_item():
    item = entry.get()
    sheet_output.insert(tk.END, item)  # Th√™m m·ª•c v√†o sheet_output
    entry.delete(0, tk.END)  # X√≥a gi√° tr·ªã trong entry
    save_to_file()

def delete_item():
    selected_item_index = sheet_output.curselection()
    if selected_item_index:
        if sheet_output.curselection():
            sheet_output.delete(selected_item_index)
        save_to_file()

def modify_item():
    selected_item_index = sheet_output.curselection()
    if selected_item_index:
        item = entry.get()
        if item:
            sheet_output.delete(selected_item_index)
            sheet_output.insert(selected_item_index, item)
            entry.delete(0, tk.END)  # X√≥a gi√° tr·ªã trong entry
            save_to_file()

def save_to_file():
    with open('Configure/sheet_name.txt', 'w') as file:
        for item in sheet_output.get(0, tk.END):
            file.write(f"{item}\n")        

def open_text_input_app():
    new_window = tk.Toplevel(root)  # T·∫°o c·ª≠a s·ªï m·ªõi
    app = ADVANCE.TextInputApp(new_window)  # Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng TextInputApp

def editConnection():
    ConnectionGUI.edit_connection()

def editID():
    ID.editID()

# T·∫°o c·ª≠a s·ªï ch√≠nh
root = tk.Tk()
root.title("SAP HANA Task Scheduler")
# root.geometry("800x600")  # ƒê·∫∑t k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh cho c·ª≠a s·ªï GUI

root.resizable(False, False)  # Kh√¥ng cho ph√©p thay ƒë·ªïi k√≠ch th∆∞·ªõc c·ª≠a s·ªï
root.iconbitmap("icon.ico")
# T·∫°o thanh menu
menu_bar = tk.Menu(root)
Configure = tk.Menu(menu_bar, tearoff=0)
Configure.add_command(label="Connection", command=editConnection)
Configure.add_command(label="Spreadsheet ID", command=editID)
menu_bar.add_cascade(label="Configure", menu=Configure)



code_menu = tk.Menu(menu_bar, tearoff=0)
code_menu.add_command(label="Customer", command=Modify_customer_code)
code_menu.add_command(label="Product", command=Modify_Product_code)
code_menu.add_command(label="Advance", command=open_text_input_app)
menu_bar.add_cascade(label="Modify", menu=code_menu)

# G√°n thanh menu cho c·ª≠a s·ªï
root.config(menu=menu_bar)

# Create a frame to hold the RUN button and the schedule options
top_frame = tk.Frame(root)
top_frame.pack(pady=10)

# N√∫t ch·∫°y th·ªß c√¥ng
run_button = tk.Button(top_frame, text="RUN", command=run_task_maunal, bg='red', fg = 'white')  # Set initial color to red
run_button.pack(side=tk.LEFT, padx=(0, 5))  # Align to the left

# Ch·ªçn th·ªùi gian t·ª± ƒë·ªông
schedule_var = tk.StringVar(value='240')  # M·∫∑c ƒë·ªãnh l√† 15 ph√∫t
schedule_label = tk.Label(top_frame, text="Select automatic time (minutes):")
schedule_label.pack(side=tk.LEFT, padx=(5, 5))

schedule_options = [15, 60, 180,240]  # 15 ph√∫t, 1 gi·ªù, 3 gi·ªù
schedule_menu = tk.OptionMenu(top_frame, schedule_var, *schedule_options)
schedule_menu.pack(side=tk.LEFT, padx=(0, 5))

# N√∫t thi·∫øt l·∫≠p
schedule_button = tk.Button(top_frame, text="SCHEDULE", command=start_scheduled_task, bg='blue', fg='white')
schedule_button.pack(side=tk.LEFT, padx=(5, 10))
 
both_sheet = tk.Frame(root)
both_sheet.pack(pady=10)

text_label = tk.Label(both_sheet,text="Copy Sheet")
text_label.pack(side=tk.LEFT)
text_var = tk.StringVar(value="MT")  # Bi·∫øn cho Text
text_entry = tk.Entry(both_sheet, textvariable=text_var, width=30)  # T·∫°o Entry v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
text_entry.pack(side=tk.LEFT, padx=(10, 5))  # ƒê·∫∑t Entry b√™n tr√°i

checkbox_var = tk.BooleanVar(value=True)  # Bi·∫øn cho Checkbox
checkbox = tk.Checkbutton(both_sheet, text="Run both sheet", variable=checkbox_var)  # T·∫°o Checkbox
checkbox.pack(side=tk.LEFT)  # ƒê·∫∑t Checkbox b√™n c·∫°nh Entry

Modify_label = tk.Label(root, text="Modify sheet to run")
Modify_label.pack(padx=0)

txt_frame_modify = tk.Frame(root)
txt_frame_modify.pack(pady=10)

# Entry for adding/modifying items
entry = tk.Entry(txt_frame_modify, width=20)
entry.pack(side=tk.LEFT, padx=(10, 10))

# N√∫t th√™m
add_button = tk.Button(txt_frame_modify, text="ADD", command=add_item)
add_button.pack(side=tk.LEFT, padx=(5, 5))

# N√∫t x√≥a
delete_button = tk.Button(txt_frame_modify, text="DELETE", command=delete_item)
delete_button.pack(side=tk.LEFT, padx=(5, 5))

# N√∫t s·ª≠a
modify_button = tk.Button(txt_frame_modify, text="MODIFY", command=modify_item)
modify_button.pack(side=tk.LEFT, padx=(5, 5))

txt_frame = tk.Frame(root)
txt_frame.pack(pady=10)

# Thay th·∫ø sheet_output b·∫±ng Listbox
sheet_output = tk.Listbox(txt_frame, height=10, width=50, bd=1, highlightbackground="black", highlightcolor="black")
sheet_output.pack(side=tk.LEFT, padx=(0, 10))  # Th√™m kho·∫£ng c√°ch b√™n ph·∫£i

console_frame = tk.Frame(root)  # T·∫°o m·ªôt frame m·ªõi ƒë·ªÉ ch·ª©a label v√† button
console_frame.pack(pady=10)  # ƒê·∫∑t frame v·ªõi kho·∫£ng c√°ch tr√™n v√† d∆∞·ªõi

console_label = tk.Label(console_frame, text="Console output")  # Chuy·ªÉn console_label v√†o frame
console_label.pack(side=tk.LEFT, padx=(0, 5))  # ƒê·∫∑t label b√™n tr√°i v·ªõi kho·∫£ng c√°ch b√™n ph·∫£i

# Th√™m n√∫t ƒë·ªÉ x√≥a console
clear_button = tk.Button(console_frame, text="Clear", command=lambda: console_output.delete(1.0, tk.END))  # N√∫t ƒë·ªÉ x√≥a n·ªôi dung console
clear_button.pack(side=tk.LEFT)  # ƒê·∫∑t n√∫t b√™n c·∫°nh label

# T·∫°o m·ªôt Text widget l·ªõn ƒë·ªÉ hi·ªÉn th·ªã console output
console_output = tk.Text(root, height=10, width=50, bd=1, highlightbackground="black", highlightcolor="black")
console_output.pack(pady=10, fill=tk.X, expand=True)  # C·∫≠p nh·∫≠t ƒë·ªÉ chi·∫øm 100% chi·ªÅu r·ªông
console_output.config(wrap=tk.WORD)  # Cho ph√©p xu·ªëng h√†ng theo t·ª´

# Chuy·ªÉn h∆∞·ªõng stdout ƒë·∫øn textbox
sys.stdout = RedirectText(console_output)

# G·ªçi h√†m ƒë·ªÉ t·∫£i d·ªØ li·ªáu v√†o Listbox khi kh·ªüi ƒë·ªông
load_listboxes_from_file()

# Th√™m s·ª± ki·ªán ƒë·ªÉ d·ª´ng t·∫•t c·∫£ c√°c thread khi c·ª≠a s·ªï ch√≠nh ƒë√≥ng
root.protocol("WM_DELETE_WINDOW", on_quit)  # G·ªçi h√†m on_quit khi c·ª≠a s·ªï ch√≠nh b·ªã ƒë√≥ng

# Ch·∫°y GUI
root.mainloop()
